---

- name: create /etc/jenkins_jobs
  file: path={{ item }} state=directory
  with_items:
    - /etc/jenkins_jobs
    - /etc/jenkins_jobs/definitions
  tags: ['reconfigure-jobs-using-job-builder']

- name: deploy jenkins_jobs.ini
  template: dest=/etc/jenkins_jobs/jenkins_jobs.ini
    src=jenkins_jobs.ini
  tags: ['reconfigure-jobs-using-job-builder']

# the with_items: will return a single dictionary
# but job_builder requires an array
# we can convert a dictionary into an array member
# by simply prefing it with '-' :
# - {item}
#
- name: upload jenkins jobs definitions
  copy: dest="/etc/jenkins_jobs/definitions/{{item.job.name}}"
    content="- {{ item }}"
  with_items: azulinho_jenkins_reconfigure_jobs_using_job_builder
  register: _upload
  tags: ['reconfigure-jobs-using-job-builder']

# we could have taken the path of building a single
# definition file containing all the jobs, and then
# uploading that file to jenkins.
# however by building a single file for each job,
# testing it and uploading it one by one, we get to
# debug failures a lot quicker
- name: gather list of jobs
  command: ls /etc/jenkins_jobs/definitions/
  register: _jobs
  tags: ['reconfigure-jobs-using-job-builder']

- name: test job definitions before updating
  command: su - jenkins -c "jenkins-jobs test /etc/jenkins_jobs/definitions/{{ item }}"
  with_items:
    - "{{ _jobs.stdout_lines }}"
  when: _upload.changed
  tags: ['reconfigure-jobs-using-job-builder']

- name: upload job definitions
  command: su - jenkins -c "jenkins-jobs update /etc/jenkins_jobs/definitions/{{item}}"
  with_items:
    - "{{ _jobs.stdout_lines }}"
  when: _upload.changed
  tags: ['reconfigure-jobs-using-job-builder']


